{
    "data": {
        "markdownRemark": {
            "html": "<h2>Git Rebase</h2>\n<p>Rebasing a branch in Git is a way to move the entirety of a branch to another point in the tree. The simplest example is moving a branch further up in the tree. Say we have a branch that diverged from the master branch at point A:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-none\"><code>        /o-----o---o--o-----o--------- branch\n--o-o--A--o---o---o---o----o--o-o-o--- master</code></pre>\n      </div>\n<p>When you rebase you can move it like this: </p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-none\"><code>                                   /o-----o---o--o-----o------ branch\n--o-o--A--o---o---o---o----o--o-o-o master</code></pre>\n      </div>\n<p>To rebase, make sure you have all the commits you want in the rebase in your master branch. Check out the branch you want to rebase and type <code>git rebase master</code> (where master is the branch you want to rebase on). </p>\n<p>It is also possible to rebase on a different branch, so that for example a branch that was based on another branch (let’s call it feature) is rebased on master: </p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-none\"><code>                            /---o-o branch\n           /---o-o-o-o---o--o------ feature\n----o--o-o-A----o---o--o-o-o--o--o- master</code></pre>\n      </div>\n<p>After <code>git rebase master branch</code> or <code>git rebase master</code> when you have checked out the branch, you’ll get:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-none\"><code>           /---o-o-o-o---o--o------ feature\n----o--o-o-A----o---o--o-o-o--o--o- master\n                                  \\---o-o branch</code></pre>\n      </div>\n<h3>Git rebase interactive in the console</h3>\n<p>To use <code>git rebase</code> in the console with a list of commits you can choose, edit or drop in the rebase:</p>\n<ul>\n<li>Enter <code>git rebase -i HEAD~5</code> with the last number being any number of commits from the most recent backwards you want to review. </li>\n<li>In vim, press <code>esc</code>, then <code>i</code> to start editing the test. </li>\n<li>On the left hand side you can overwrite the <code>pick</code> with one of the commands below. If you want to squash a commit into a previous one and discard the commit message, enter <code>f</code> in the place of the <code>pick</code> of the commit. </li>\n</ul>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-none\"><code>pick 452b159 <message for this commit>\npick 7fd4192 <message for this commit>\npick c1af3e5 <message for this commit>\npick 5f5e8d3 <message for this commit>\npick 5186a9f <message for this commit>\n\n# Rebase 0617e63..5186a9f onto 0617e63 (30 commands)\n#\n# Commands:\n# p, pick = use commit\n# r, reword = use commit, but edit the commit message\n# e, edit = use commit, but stop for amending\n# s, squash = use commit, but meld into previous commit\n# f, fixup = like \"squash\", but discard this commit's log message\n# x, exec = run command (the rest of the line) using shell\n# d, drop = remove commit\n#\n# These lines can be re-ordered; they are executed from top to bottom.\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n#\n# However, if you remove everything, the rebase will be aborted.\n#\n# Note that empty commits are commented out</code></pre>\n      </div>\n<ul>\n<li>Enter <code>esc</code> followed by <code>:wq</code> to save and quit.</li>\n<li>If it rebases successfully then you need to force push your changes with <code>git push -f</code> to add the rebased version to your github repo.</li>\n<li>If there is a merge conflict, there are a number of ways to fix this, including following the suggestions in <a href=\"https://help.github.com/enterprise/2.11/user/articles/resolving-a-merge-conflict-using-the-command-line/\">this guide</a>. One way is to open the files in Atom and delete the parts of the code you do not want. Then use <code>git add &#x3C;file name></code> followed by <code>git rebase --continue</code>. You can skip over the confliced commit by entering <code>git rebase --skip</code>, exit the git rebase by entering <code>git rebase --abort</code> in your console.</li>\n</ul>\n<h3>More Information:</h3>\n<ul>\n<li>Git documentation: <a href='https://git-scm.com/docs/git-rebase' target='_blank' rel='nofollow'>rebase</a></li>\n<li>Thoughbot guide to <a href='https://robots.thoughtbot.com/git-interactive-rebase-squash-amend-rewriting-history' target='_blank' rel='nofollow'>git rebase interactive</a></li>\n</ul>",
            "fields": {
                "slug": "/git/git-rebase/"
            },
            "frontmatter": {
                "title": "Git Rebase"
            }
        }
    },
    "pathContext": {
        "slug": "/git/git-rebase/"
    }
}