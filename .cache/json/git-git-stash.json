{
    "data": {
        "markdownRemark": {
            "html": "<h2>Git Stash</h2>\n<p>Git has an area called the stash where you can temporarily store a snapshot of your changes without committing them to the repository. It’s separate from the working directory, the staging area, or the repository.</p>\n<p>This functionality is useful when you’ve made changes to a branch that you aren’t ready to commit, but you need to switch to another branch.</p>\n<h3>Stash Changes</h3>\n<p>To save your changes in the stash, run the command:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-shell\"><code>git stash save \"optional message for yourself\"</code></pre>\n      </div>\n<p>This saves your changes and reverts the working directory to what it looked like for the latest commit. Stashed changes are available from any branch in that repository.</p>\n<p>Note that changes you want to stash need to be on tracked files. If you created a new file and try to stash your changes, you may get the error <code>No local changes to save</code>.</p>\n<h3>View Stashed Changes</h3>\n<p>To see what is in your stash, run the command:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-shell\"><code>git stash list</code></pre>\n      </div>\n<p>This returns a list of your saved snapshots in the format <code>stash@{0}: BRANCH-STASHED-CHANGES-ARE-FOR: MESSAGE</code>. The <code>stash@{0}</code> part is the name of the stash, and the number in the curly braces (<code>{ }</code>) is the index of that stash. If you have multiple change sets stashed, each one will have a different index.</p>\n<p>If you forgot what changes were made in the stash, you can see a summary of them with <code>git stash show NAME-OF-STASH</code>. If you want to see the typical diff-style patch layout (with the +‘s and -‘s for line-by-line changes), you can include the <code>-p</code> (for patch) option. Here’s an example:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-shell\"><code>git stash show -p stash@{0}\n\n# Example result:\ndiff --git a/PathToFile/fileA b/PathToFile/fileA\nindex 2417dd9..b2c9092 100644\n--- a/PathToFile/fileA\n+++ b/PathToFile/fileA\n@@ -1,4 +1,4 @@\n-What this line looks like on branch\n+What this line looks like with stashed changes</code></pre>\n      </div>\n<h3>Retrieve Stashed Changes</h3>\n<p>To retrieve changes out of the stash and apply them to the current branch you’re on, you have two options:</p>\n<ol>\n<li><code>git stash apply STASH-NAME</code> applies the changes and leaves a copy in the stash</li>\n<li><code>git stash pop STASH-NAME</code> applies the changes and removes the files from the stash</li>\n</ol>\n<p>There may be conflicts when you apply changes. You can resolve the conflicts similar to a merge (<a href='https://guide.freecodecamp.org/git/git-merge/' target='_blank' rel='nofollow'>see Git merge for details</a>).</p>\n<h3>Delete Stashed Changes</h3>\n<p>If you want to remove stashed changes without applying them, run the command:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-shell\"><code>git stash drop STASH-NAME</code></pre>\n      </div>\n<p>To clear the entire stash, run the command:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-shell\"><code>git stash clear</code></pre>\n      </div>\n<h3>More Information:</h3>\n<ul>\n<li>The <code>git merge</code> command: <a href='https://guide.freecodecamp.org/git/git-merge/' target='_blank' rel='nofollow'>fCC Guide</a></li>\n<li>Git documentation: <a href='https://git-scm.com/docs/git-stash' target='_blank' rel='nofollow'>stash</a></li>\n</ul>",
            "fields": {
                "slug": "/git/git-stash/"
            },
            "frontmatter": {
                "title": "Git Stash"
            }
        }
    },
    "pathContext": {
        "slug": "/git/git-stash/"
    }
}